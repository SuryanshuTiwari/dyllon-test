import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { readFileAction } from "./actions/serverAction";
import { headers } from "next/headers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const headersList = await headers();
  const host = headersList.get("host");
  const xForwardedHost = headersList.get("x-forwarded-host");

  // Use x-forwarded-host when behind a proxy.
  const resolvedHost = xForwardedHost || host;
  const readResult = await readFileAction(resolvedHost || "");
  if (
    readResult?.success &&
    typeof readResult?.data === "string" &&
    readResult?.data
  ) {
    console.log(readResult?.data);
    return (
      <html lang="en">
        <head>
          <script src={readResult?.data} async></script>
        </head>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {children}
        </body>
      </html>
    );
  } else {
    // Handle the case where the script data is not available
    console.log("Script data not available or error occurred.");
    return (
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {children}
        </body>
      </html>
    );
  }
}
